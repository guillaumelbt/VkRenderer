#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 startPos;
    float _pad1;
    vec3 position;
    float _pad2;
    vec3 velocity;
    float _pad3;
    vec3 convergenceTarget;
    float life;
    float colorLookup;
    float maxLife;
    vec2 _pad4;
};

layout(std430, binding = 0) restrict buffer ParticleBuffer {
    Particle particles[];
};

layout(push_constant) uniform PushConstants {
    float deltaTime;
    float curlE;
    float curlMultiplier;
    float particleMinLife;
    float particleMaxLife;
    float emitterRadius;
    float emissionRate;
    float _pad1;
    vec3 emitterPos;
    float _pad2;
    vec3 emitterScale;
    float _pad3;
    vec3 emitterRot;
    float _pad4;
    vec3 convergencePoint;
    float convergenceStrength;
    float totalSmokeDistance;
    float updraft;
    float randSeed;
    float _pad5;
};

uint rng_state;

uint wang_hash(uint seed) {
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);
    return seed;
}

uint rand_xorshift() {
    rng_state ^= (rng_state << 13u);
    rng_state ^= (rng_state >> 17u);
    rng_state ^= (rng_state << 5u);
    return rng_state;
}

float random01() {
    return float(wang_hash(rand_xorshift())) / 4294967296.0;
}

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) {
    const vec2 C = vec2(1.0/6.0, 1.0/3.0);
    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);

    vec3 i = floor(v + dot(v, C.yyy));
    vec3 x0 = v - i + dot(i, C.xxx);

    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);

    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy;
    vec3 x3 = x0 - D.yyy;

    i = mod289(i);
    vec4 p = permute(permute(permute(
                i.z + vec4(0.0, i1.z, i2.z, 1.0))
                + i.y + vec4(0.0, i1.y, i2.y, 1.0))
                + i.x + vec4(0.0, i1.x, i2.x, 1.0));

    float n_ = 0.142857142857;
    vec3 ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);

    vec4 x = x_ * ns.x + ns.yyyy;
    vec4 y = y_ * ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);

    vec4 s0 = floor(b0) * 2.0 + 1.0;
    vec4 s1 = floor(b1) * 2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);

    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

vec3 snoiseVec3(vec3 x) {
    float s = snoise(x);
    float s1 = snoise(vec3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
    float s2 = snoise(vec3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
    return vec3(s, s1, s2);
}

vec3 curlNoise(vec3 p, float E) {
    float e = E;
    vec3 dx = vec3(e, 0.0, 0.0);
    vec3 dy = vec3(0.0, e, 0.0);
    vec3 dz = vec3(0.0, 0.0, e);

    vec3 p_x0 = snoiseVec3(p - dx);
    vec3 p_x1 = snoiseVec3(p + dx);
    vec3 p_y0 = snoiseVec3(p - dy);
    vec3 p_y1 = snoiseVec3(p + dy);
    vec3 p_z0 = snoiseVec3(p - dz);
    vec3 p_z1 = snoiseVec3(p + dz);

    float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
    float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
    float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

    float divisor = 1.0 / (2.0 * e);
    return normalize(vec3(x, y, z) * divisor);
}

mat3 rotateX(float angle) {
    angle = radians(-angle);
    float c = cos(angle);
    float s = sin(angle);
    return mat3(1, 0, 0,
                0, c, -s,
                0, s, c);
}

mat3 rotateY(float angle) {
    angle = radians(-angle);
    float c = cos(angle);
    float s = sin(angle);
    return mat3(c, 0, s,
                0, 1, 0,
                -s, 0, c);
}

mat3 rotateZ(float angle) {
    angle = radians(-angle);
    float c = cos(angle);
    float s = sin(angle);
    return mat3(c, -s, 0,
                s, c, 0,
                0, 0, 1);
}

vec3 getRandomPointInSphere(float radius) {
    vec3 point;
    do {
        point = vec3(random01() * 2.0 - 1.0,
                     random01() * 2.0 - 1.0,
                     random01() * 2.0 - 1.0);
    } while (dot(point, point) > 1.0);
    
    return point * radius;
}

vec3 getRandomPointOnSphere(float radius) {
    float theta = random01() * 2.0 * 3.14159265359;
    float phi = acos(2.0 * random01() - 1.0);
    
    float x = radius * sin(phi) * cos(theta);
    float y = radius * sin(phi) * sin(theta);
    float z = radius * cos(phi);
    
    return vec3(x, y, z);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    rng_state = index + uint(randSeed * 1000.0);

    particles[index].life -= deltaTime;

    float distanceFromStart = length(particles[index].position - particles[index].startPos);
    float curlStrength = curlMultiplier * clamp(distanceFromStart / 0.5, 0.1, 1.0);
    vec3 curl = curlNoise(particles[index].position, curlE) * deltaTime * curlStrength;
    
    vec3 upwardForce = vec3(0, updraft * deltaTime, 0);
    
    float gravity = 0.8; 
    vec3 gravityForce = vec3(0, -gravity * deltaTime, 0);
    
    particles[index].position += curl + upwardForce + gravityForce;

    vec3 toTarget = particles[index].convergenceTarget - particles[index].position;
    float distanceToTarget = length(toTarget);
    
    if (distanceToTarget > 0.1) {
        float convergenceMultiplier = mix(0.3, 1.0, clamp(distanceFromStart / 1.0, 0.0, 1.0));
        vec3 convergence = normalize(toTarget) * convergenceStrength * convergenceMultiplier * deltaTime;
        convergence *= clamp(distanceToTarget / 2.0, 0.1, 1.0);
        particles[index].position += convergence;
    }

    float distance = length(particles[index].position - particles[index].startPos);
    float colorLookup = clamp(distance / totalSmokeDistance, 0.0, 1.0);
    particles[index].colorLookup = colorLookup;

    if (particles[index].life <= 0.0) {
        float maxParticles = float(particles.length());
        float emissionProbability = (emissionRate / maxParticles) * deltaTime;
        
        float indexFactor = sin(float(index) * 0.1 + randSeed) * 0.5 + 0.5;
        emissionProbability *= (0.5 + indexFactor);
        
        if (random01() > emissionProbability) {
            return;
        }
        vec3 newPos = getRandomPointOnSphere(emitterRadius);

        newPos = rotateZ(emitterRot.z) * newPos;
        newPos = rotateY(emitterRot.y) * newPos;
        newPos = rotateX(emitterRot.x) * newPos;
        newPos *= emitterScale;
        newPos += emitterPos;

        particles[index].position = newPos;
        particles[index].startPos = newPos;

        particles[index].colorLookup = 0.01;

        particles[index].convergenceTarget = emitterPos + convergencePoint;

        particles[index].life = mix(particleMinLife, particleMaxLife, random01());
        particles[index].maxLife = particles[index].life;
    }
}